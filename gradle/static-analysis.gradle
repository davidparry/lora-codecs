checkstyleMain {
    configProperties.checkstyleSuppressionsPath = file("${project.projectDir}/config/checkstyle/suppressions.xml")
    ignoreFailures = false
}

checkstyleTest {
    ignoreFailures = true
}

spotbugsMain {
    effort = "max"
    ignoreFailures = false
    excludeFilter = file("${project.projectDir}/config/findbugs/findbugs-filter.xml")
}

spotbugsTest {
    reportLevel = "high"
    ignoreFailures = true
    excludeFilter = file("${project.projectDir}/config/findbugs/findbugs-filter.xml")
}


tasks.named('spotbugsMain') {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    exclude '**/com/firstaware/ic/**'
}

pmd {
    rulePriority = 4
    sourceSets {
        main {
            java {
                exclude 'com/firstaware/ic/**'
            }
        }
    }
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]

}

pmdMain {
    ignoreFailures = true
    // ruleSetFiles = files("${project.projectDir}/config/pmd/pmd-ruleset.xml")
}

pmdTest {
    ignoreFailures = true
    ruleSetFiles = files("${project.projectDir}/config/pmd/pmd-ruleset.xml")
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate { //http://stackoverflow.com/a/29887806/2024
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            'com/firstaware/Application.class'
                    ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    'com.firstaware.Application'
            ]
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

check.finalizedBy jacocoTestReport, jacocoTestCoverageVerification
